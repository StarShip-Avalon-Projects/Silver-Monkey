
        Public Shared Sub RestorePS(days As Double)
            If PsProcess <> PsSystemRunning.PsNone Then Exit Sub
            PsProcess = PsSystemRunning.PsRestore
            '(0:500) When the bot starts backing up the character Phoenix Speak,
            MainMSEngine.MSpage.Execute(502)
            psReceiveCounter = 0
            psSendCounter = 1
            _PSS_Stack.Clear()
            CurrentPS_Stage = PS_BackupStage.RestoreAllCharacterPS
            callbk.SendClientMessage("SYSTEM:", "Restoring characters newer than " + days.ToString + " days to the dream.")
            Dim cmd As String = "select * FROM BACKUPMASTER"
            CurrentPS_Stage = PS_BackupStage.RestoreAllCharacterPS
            Dim db As SQLiteDatabase = New SQLiteDatabase(MSPK_MDB.SQLitefile)
            Dim dt As System.Data.DataTable = SQLiteDatabase.GetDataTable(cmd)
            Dim result As String = ""
            For Each row As System.Data.DataRow In dt.Rows
                Dim ft As String = row.Item("date modified").ToString
                Dim Time As TimeSpan = Main.FurcTime.Subtract(DateTime.Parse(ft))
                If Time.Days <= days Then
                    Build_PS_CMD(row.Item(MS_Name).ToString())
                End If
            Next
            Dim s As New PSS_Struct
            s = _PSS_Stack(0)
            callbk.ServerStack.Enqueue(s.Cmd)
        End Sub

		     ''' <summary>
        ''' Process Game server instructions
        ''' </summary>
        ''' <param name="PS_Stat"></param>
        ''' <param name="ps_KV"></param>
        ''' <param name="data">Game server PS instructions</param>
        ''' <returns></returns>
        Private Function ProcessPSData(ByVal PS_Stat As Short, ByVal ps_KV As List(Of Variable), data As String) As Boolean
            If CurrentPS_Stage = PS_BackupStage.off Then


                Return False
            


            ElseIf CurrentPS_Stage = PS_BackupStage.RestoreAllCharacterPS And PS_Stat <= PSS_Stack.Count And psSendCounter = psReceiveCounter + 1 Then


                If PS_Stat <> PSS_Stack.Count - 1 Then
                    LastSentPS = 0
                    Dim s As New PSS_Struct
                    s = PSS_Stack(PS_Stat)
                    callbk.ServerStack.Enqueue(s.Cmd)
                    callbk.FurcSession.Player = Main.NametoFurre(s.Name, True)
                    callbk.FurcSession.Player.Message = ""
                    MainMSEngine.PageSetVariable("MESSAGE", "")
                    MS_Engine.MainMSEngine.PageExecute(506, 507)

                    psSendCounter = CShort(PS_Stat + 1)
                    psReceiveCounter = PS_Stat

                ElseIf PS_Stat = PSS_Stack.Count - 1 Then
                    PsProcess = PsSystemRunning.PsNone
                    Main.SendClientMessage("SYSTEM:", "Completed Character restoration to the dream")
                    '(0:501) When the bot completes backing up the characters Phoenix Speak,
                    MainMSEngine.MSpage.Execute(503)
                    CurrentPS_Stage = PS_BackupStage.off
                End If

            End If
            Return True
        End Function

        Private psCheck As Boolean = False
        ''' <summary>
        ''' process Phoenix Speak data coming from the game server
        ''' Regex capture of server responses
        ''' Execute Monkey Speak Engine processing (Triggers setting Monkey Speak Variables)
        ''' </summary>
        ''' <param name="data">Server Data</param>
        Public Sub ProcessServerPS(data As String)
            SyncLock Me
                Debug.WriteLine(data)
                Dim PS_Stat As Int16 = 0
                '(PS Ok: get: result: bank=200, clearance=10, member=1, message='test', stafflv=2, sys_lastused_date=1340046340
                Dim psResult As Regex = New Regex(String.Format("^PS (\d+)? ?Ok: get: result: (.*)$"))          'Regex: ^\(PS Ok: get: result: (.*)$
                Dim psMatch As System.Text.RegularExpressions.Match = psResult.Match(String.Format("{0}", data))
                If psMatch.Success Then
                    Int16.TryParse(psMatch.Groups(1).Value, PS_Stat)
                    Dim psResult1 As Regex = New Regex("^<empty>$")
                    Dim psMatch2 As System.Text.RegularExpressions.Match = psResult1.Match(psMatch.Groups(2).Value)
                    If psMatch2.Success And CurrentPS_Stage = PS_BackupStage.GetAlphaNumericList Then
                        If NextLetter <> "{"c Then
                            callbk.ServerStack.Enqueue("ps get character." + incrementLetter(NextLetter) + "*")
                        Else
                            psCheck = ProcessPSData(1, PSinfo, data)
                        End If
                    Else


                        'Add "," to the end of match #1.
                        'Input: "bank=200, clearance=10, member=1, message='test', stafflv=2, sys_lastused_date=1340046340,"
                        Dim input As String = psMatch.Groups(2).Value.ToString & ","
                        'Regex: ( ?([^=]+)=('?)(.+?)('?)),

                        If CurrentPS_Stage <> PS_BackupStage.GetAlphaNumericList Then PSinfo.Clear()
                        Dim mc As MatchCollection = Regex.Matches(input, "\s?(.*?)=('?)(\d+|.*?)(\2),?")
                        Dim i As Integer
                        For i = 0 To mc.Count - 1
                            Dim m As System.Text.RegularExpressions.Match = mc.Item(i)
                            If Not PSinfo.ContainsKey(m.Groups(1).Value) Then PSinfo.Add(m.Groups(1).Value.ToString, m.Groups(3).Value)
                            'Match(1) : Value(Name)
                            'Match 2: Empty if number, ' if string
                            'Match(3) : Value()
                        Next
                        'Int16.TryParse(psMatch.Groups(1).Value.ToString, PS_Stat)
                        If CurrentPS_Stage <> PS_BackupStage.GetAlphaNumericList Then

                            psCheck = ProcessPSData(PS_Stat, PSinfo, data)

                        ElseIf CurrentPS_Stage = PS_BackupStage.GetAlphaNumericList And NextLetter <> "{"c Then
                            Dim m As System.Text.RegularExpressions.Match = mc.Item(mc.Count - 1)
                            NextLetter = incrementLetter(m.Groups(1).Value.ToString)
                            If NextLetter <> "{"c Then
                                callbk.ServerStack.Enqueue("ps get character." + NextLetter + "*")
                            Else
                                psCheck = ProcessPSData(1, PSinfo, data)
                            End If
                        ElseIf CurrentPS_Stage = PS_BackupStage.GetAlphaNumericList And NextLetter = "{"c Then
                            'CurrentPS_Stage = PS_BackupStage.GetList
                            psCheck = ProcessPSData(PS_Stat, PSinfo, data)

                        End If

                    End If
                End If


                psResult = New Regex(String.Format("^PS (\d+)? ?Ok: get: multi_result (\d+)/(\d+): (.+)$"))
                'Regex: ^\(PS Ok: get: result: (.*)$
                psMatch = psResult.Match(String.Format("{0}", data))
                If psMatch.Success Then

                    Int16.TryParse(psMatch.Groups(1).Value.ToString, PS_Stat)
                    If psMatch.Groups(2).Value.ToString = "1" And CurrentPS_Stage = PS_BackupStage.GetList Then
                        pslen = 0
                        PSinfo.Clear()
                        PS_Page = ""
                    ElseIf CurrentPS_Stage = PS_BackupStage.GetAlphaNumericList Then
                        pslen = 0
                    End If

                    'Add "," to the end of match #1.
                    'Input: "bank=200, clearance=10, member=1, message='test', stafflv=2, sys_lastused_date=1340046340,"
                    'Dim input As String = psMatch.Groups(4).Value.ToString
                    PS_Page += psMatch.Groups(4).Value.ToString
                    pslen += data.Length + 1
                    'Regex: ( ?([^=]+)=('?)(.+?)('?)),

                    If psMatch.Groups(2).Value = psMatch.Groups(3).Value Then
                        'PS_Page += ","


                        Dim mc As MatchCollection = Regex.Matches(String.Format(PS_Page), String.Format("\s?(.*?)=('?)(\d+|.*?)(\2),?"), RegexOptions.IgnorePatternWhitespace + RegexOptions.CultureInvariant + RegexOptions.IgnoreCase)
                        If CurrentPS_Stage <> PS_BackupStage.GetAlphaNumericList Then PSinfo.Clear()
                        For i As Integer = 0 To mc.Count - 1
                            Dim m As System.Text.RegularExpressions.Match = mc.Item(i)
                            If Not PSinfo.ContainsKey(m.Groups(1).Value) Then PSinfo.Add(m.Groups(1).Value, m.Groups(3).Value)

                        Next
                        Dim num As Integer = 0
                        Integer.TryParse(psMatch.Groups(3).Value, num)
                        If pslen > 1000 * num And CurrentPS_Stage = PS_BackupStage.GetList Then
                            CurrentPS_Stage = PS_BackupStage.GetAlphaNumericList
                            Dim m As System.Text.RegularExpressions.Match = mc.Item(mc.Count - 1)
                            callbk.ServerStack.Enqueue("ps get character." + m.Groups(1).Value.Substring(0, 1) + "*")

                        ElseIf CurrentPS_Stage <> PS_BackupStage.GetAlphaNumericList Then

                            psCheck = ProcessPSData(PS_Stat, PSinfo, data)

                        ElseIf CurrentPS_Stage = PS_BackupStage.GetAlphaNumericList And NextLetter <> "{"c Then
                            Dim m As System.Text.RegularExpressions.Match = mc.Item(mc.Count - 1)
                            NextLetter = incrementLetter(m.Groups(1).Value.ToString)
                            If NextLetter <> "{"c Then
                                callbk.ServerStack.Enqueue("ps get character." + NextLetter + "*")
                            Else
                                psCheck = ProcessPSData(1, PSinfo, data)
                            End If
                        ElseIf CurrentPS_Stage = PS_BackupStage.GetAlphaNumericList And NextLetter = "{"c Then
                            'CurrentPS_Stage = PS_BackupStage.GetList

                            psCheck = ProcessPSData(PS_Stat, PSinfo, data)

                        End If

                    End If
                    '(PS 5 Error: get: Query error: Field 'Bob' does not exist

                End If

                psResult = New Regex("^PS (\d+)? ?Ok: set: Ok$")
                '^PS (\d+)? ?Ok: set: Ok
                psMatch = psResult.Match(data)
                If psMatch.Success Then
                    PSinfo.Clear()
                    Int16.TryParse(psMatch.Groups(1).Value.ToString, PS_Stat)

                    ProcessPSData(PS_Stat, PSinfo, data)

                End If
                'PS (\d+) Error: Sorry, PhoenixSpeak commands are currently not available in this dream.
                psResult = New Regex("^PS (\d+)? ?Error: (.*?)")
                psMatch = psResult.Match(data)
                If psMatch.Success Then
                    psResult = New Regex("^PS (\d+)? ?Error: Sorry, PhoenixSpeak commands are currently not available in this dream.$")
                    'Regex: ^\(PS Ok: get: result: (.*)$
                    'PS (\d+)? ?Error: get: Query error: (.+) Unexpected character '(.+)' at column (\d+)
                    Dim psMatch2 As System.Text.RegularExpressions.Match = psResult.Match(data)
                    Dim psResult2 As Regex = New Regex("^PS (\d+)? ?Error: set")
                    Dim psmatch3 As System.Text.RegularExpressions.Match = psResult2.Match(data)
                    Dim psResult3 As Regex = New Regex("PS (\d+)? ?Error: set: Query error: Only (\d+) rows allowed.")
                    Dim psmatch4 As System.Text.RegularExpressions.Match = psResult3.Match(data)
                    If psMatch2.Success Or psmatch3.Success Or psmatch4.Success Then
                        Abort()
                        If psmatch4.Success Then
                            MainMSEngine.MSpage.Execute(503)
                        End If
                    Else
                        Int16.TryParse(psMatch.Groups(1).Value.ToString, PS_Stat)

                        If CurrentPS_Stage = PS_BackupStage.off Then
                            MS_Engine.MainMSEngine.PageExecute(80, 81, 82)

                        ElseIf CurrentPS_Stage = PS_BackupStage.GetList Then
                            If PS_Stat <> CharacterList.Count Then
                                Dim str As String = "ps " + (PS_Stat + 1).ToString + " get character." + CharacterList(PS_Stat).name + ".*"
                                callbk.ServerStack.Enqueue(str)
                                psSendCounter = CShort(PS_Stat + 1)

                                psReceiveCounter = PS_Stat

                            ElseIf PS_Stat = CharacterList.Count Then
                                CurrentPS_Stage = PS_BackupStage.off


                            End If
                        ElseIf CurrentPS_Stage = PS_BackupStage.GetTargets And psSendCounter = psReceiveCounter + 1 Then
                            If PS_Stat <> CharacterList.Count Then
                                Dim str As String = "ps " + (PS_Stat + 1).ToString + " get character." + CharacterList(PS_Stat).name + ".*"
                                callbk.ServerStack.Enqueue(str)
                                psSendCounter = CShort(PS_Stat + 1)
                                psReceiveCounter = PS_Stat
                            ElseIf PS_Stat = CharacterList.Count Then
                                CurrentPS_Stage = PS_BackupStage.off
                                PsProcess = PsSystemRunning.PsNone
                                CharacterList.Clear()
                                psReceiveCounter = 0
                                psSendCounter = 1
                                '(0:501) When the bot completes backing up the characters Phoenix Speak,
                                callbk.SendClientMessage("SYSTEM:", "Completed Backing up Dream Characters set.")
                                MainMSEngine.MSpage.Execute(501)
                            End If

                        ElseIf CurrentPS_Stage = PS_BackupStage.RestoreAllCharacterPS And PS_Stat <= PSS_Stack.Count - 1 And psSendCounter = psReceiveCounter + 1 Then
                            If PS_Stat <> PSS_Stack.Count - 1 Then
                                LastSentPS = 0
                                Dim ss As New PSS_Struct
                                ss = PSS_Stack(PS_Stat)
                                callbk.ServerStack.Enqueue(ss.Cmd)
                                psSendCounter = CShort(PS_Stat + 1)
                                psReceiveCounter = PS_Stat

                            ElseIf PS_Stat = PSS_Stack.Count - 1 Then
                                PsProcess = PsSystemRunning.PsNone
                                callbk.SendClientMessage("SYSTEM:", "Completed Character restoration to the dream")
                                '(0:501) When the bot completes backing up the characters Phoenix Speak,
                                MainMSEngine.MSpage.Execute(503)
                                CurrentPS_Stage = PS_BackupStage.off
                            End If
                        ElseIf CurrentPS_Stage = PS_BackupStage.GetSingle And PS_Stat <= CharacterList.Count And psSendCounter = psReceiveCounter + 1 Then
                            If PS_Stat <> CharacterList.Count Then
                                Dim str As String = "ps " + (PS_Stat + 1).ToString + " get character." + CharacterList(PS_Stat).name + ".*"
                                callbk.ServerStack.Enqueue(str)
                                psSendCounter = CShort(PS_Stat + 1)
                                psReceiveCounter = PS_Stat
                            ElseIf PS_Stat = CharacterList.Count Then
                                CurrentPS_Stage = PS_BackupStage.off
                                CharacterList.Clear()
                                psReceiveCounter = 0
                                psSendCounter = 1
                                PsProcess = PsSystemRunning.PsNone
                            End If
                        End If
                    End If
                End If
            End SyncLock

        End Sub

