Credits: Lothus Marque


For now, I'd skip the image support given that this is a bot, not a full client.

However, several tags still need to display... for example:

Convert beekin tags to text representation. [B-<Group ID>-T|B|G|H]
T: Trainee (red)
B: Member (Blue)
G: Elder (green)
H: Head
For example, [B-He-G] for Beekin, Helper, Green.

You'll also need tags for AIC and a couple of others. This should be pretty easily handled with a lookup/matching table. Specitags/Desctags and that sort of thing are not really required for most use.

This structure makes it easier to maintain, allows ongoing logs to be kept that keep more information intact (since beekin tags and the like are not saved normally!) and keeps resource usage in a background bot application lower.

Looking forward and considering that I expect parts of this to turn into small libraries that can be used elsewhere, you may also want to offer a couple main modes of operation - HTML strip, which simply removes all HTML tags, no processing/raw HTML for display, etc. Raw HTML is not as pretty, but lets you feed it through something else. Hell, you could even make a markdown converter if you felt like it. xD

Probably the best way might be to simply offer a filter callback or object you can plug in (offering a couple of defaults, if this is to be modular at all) as one or more items in the parse chain. Like how Furnarchy offered top-down regex filter lists for giggles, though more powerful since it's not just a simple regex replace. :P

A bonus here is that if you decide to use an RTF display instead of HTML or the currently-suggested plain text, you can then plug in a native RTF code filter that converts Furc's HTML tags to RTF entities at some point in the future.

Plus, once you've got this nice backend parser set up, you can attach it to just about anything with, well, a new format filter.